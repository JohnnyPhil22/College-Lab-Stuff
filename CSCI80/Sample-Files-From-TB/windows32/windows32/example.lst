Microsoft (R) Macro Assembler Version 14.44.35219.0	    10/27/25 18:49:35
example.asm						     Page 1 - 1


				; Example assembly language program -- adds two numbers
				; Author:  R. Detmer
				; Date:    1/2008

				.586
				.MODEL FLAT

				INCLUDE io.h            ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

 00000000			.DATA
 00000000 00000000		number1 DWORD   ?
 00000004 00000000		number2 DWORD   ?
 00000008 45 6E 74 65 72	prompt1 BYTE    "Enter first number", 0
	   20 66 69 72 73
	   74 20 6E 75 6D
	   62 65 72 00
 0000001B 45 6E 74 65 72	prompt2 BYTE    "Enter second number", 0
	   20 73 65 63 6F
	   6E 64 20 6E 75
	   6D 62 65 72 00
 0000002F  00000028 [		string  BYTE    40 DUP (?)
	    00
	   ]
 00000057 54 68 65 20 73	resultLbl BYTE  "The sum is", 0
	   75 6D 20 69 73
	   00
 00000062  0000000B [		sum     BYTE    11 DUP (?), 0
	    00
	   ] 00

 00000000			.CODE
 00000000			myPow PROC      ; Save x^y to EAX
 00000000  55			    push EBP
 00000001  8B EC		    mov EBP, ESP        ; ENTRY CODE

 00000003  8B 5D 08		    mov EBX, DWORD PTR [EBP + 8]        ; get exponent y
 00000006  8B 4D 0C		    mov ECX, DWORD PTR [EBP + 12]       ; get base x

 00000009  B8 00000001		    mov EAX, 1      ; initialize result to 1
 0000000E			    LBEGIN:
 0000000E  F7 E3		        mul EBX     ; EAX = EAX * x
 00000010  E2 FC		        loop LBEGIN

 00000012  5D			    pop EBP     ; EXIT CODE
 00000013  C3			    ret
 00000014			myPow ENDP

 00000014			Comp2 PROC     ; Compare two numbers
 00000014  55			    push EBP
 00000015  8B EC		    mov EBP, ESP        ; ENTRY CODE

 00000017  8B 5D 08		    mov EBX, DWORD PTR [EBP + 8]        ; get number a
 0000001A  8B 4D 0C		    mov ECX, DWORD PTR [EBP + 12]       ; get number b

 0000001D  3B D9		    cmp EBX, ECX
 0000001F  74 10		    je  EQUAL
 00000021  7C 07		    jl  LESS
 00000023  B8 00000001		    mov EAX, 1      ; a > b
 00000028  EB 0C		    jmp DONE
 0000002A			    LESS:
 0000002A  B8 FFFFFFFF		        mov EAX, -1     ; a < b
 0000002F  EB 05		        jmp DONE
 00000031			    EQUAL:
 00000031  B8 00000000		        mov EAX, 0      ; a == b
 00000036			    DONE:
 00000036  5D			        pop EBP     ; EXIT CODE
 00000037  C3			        ret
 00000038			Comp2 ENDP

 00000038			Comp3 PROC     ; Compare three numbers
 00000038  55			    push EBP
 00000039  8B EC		    mov EBP, ESP        ; ENTRY CODE

 0000003B  66| 8B 45 08		    mov AX, [EBP + 8]         ; get number a
 0000003F  66| 8B 5D 0A		    mov BX, [EBP + 10]        ; get number b
 00000043  66| 8B 4D 0C		    mov CX, [EBP + 12]        ; get number c

 00000047  66| 3B C3		    cmp AX, BX
 0000004A  7D 03		    jge Chk_AC
 0000004C  66| 8B C3		    mov AX, BX

 0000004F			    Chk_AC:
 0000004F  66| 3B C1		    cmp AX, CX
 00000052  7D 03		    jge A_Max
 00000054  66| 8B C1		    mov AX, CX
				    
 00000057			    A_Max:
 00000057  5D			        pop EBP
 00000058  C3			        ret         ; EXIT CODE
 00000059			Comp3 ENDP

 00000059			factNum PROC
 00000059  55			    push EBP
 0000005A  8B EC		    mov EBP, ESP        ; ENTRY CODE

 0000005C  83 7D 08 01		    cmp DWORD PTR [EBP + 8], 1
 00000060  7F 07		    jg RECURSE
 00000062  B8 00000001		    mov EAX, 1
 00000067  EB 10		    jmp EXIT

 00000069			    RECURSE:
 00000069  8B 5D 08		        mov EBX, DWORD PTR [EBP + 8]
 0000006C  4B			        dec EBX
 0000006D  53			        push EBX
 0000006E  E8 FFFFFFE6		        call factNum
 00000073  83 C4 04		        add ESP, 4
 00000076  43			        inc EBX
 00000077  F7 E3		        mul EBX

 00000079			    EXIT:
 00000079  5D			        pop EBP
 0000007A  C3			        ret         ; EXIT CODE
 0000007B			factNum ENDP

 0000007B			_MainProc PROC
 0000007B  6A 03		        pushd 3
 0000007D  6A 02		        pushd 2
 0000007F  E8 FFFFFF7C		        call myPow
 00000084  83 C4 08		        add ESP, 8

 00000087  66| 6A 03		        pushw 3
 0000008A  66| 6A 02		        pushw 2
 0000008D  66| 6A 01		        pushw 1
 00000090  E8 FFFFFFA3		        call Comp3
 00000095  83 C4 06		        add ESP, 6

 00000098  6A 03		        pushd 3
 0000009A  E8 FFFFFFBA		        call factNum
 0000009F  83 C4 04		        add ESP, 4

				        COMMENT #
				        input   prompt1, string, 40      ; read ASCII characters
				        atod    string          ; convert to integer
				        mov     number1, eax    ; store in memory

				        input   prompt2, string, 40      ; repeat for second number
				        atod    string
				        mov     number2, eax
				        
				        mov     eax, number1    ; first number to EAX
				        add     eax, number2    ; add second number
				        dtoa    sum, eax        ; convert to ASCII characters
				        output  resultLbl, sum          ; output label and sum
				        #

 000000A2  B8 00000000		        mov     eax, 0  ; exit with return code 0
 000000A7  C3			        ret
 000000A8			_MainProc ENDP
				END                             ; end of source code

Microsoft (R) Macro Assembler Version 14.44.35219.0	    10/27/25 18:49:35
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000006E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000A8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Comp2  . . . . . . . . . . . . .	P Near	 00000014 _TEXT	Length= 00000024 Public
  LESS . . . . . . . . . . . . .	L Near	 0000002A _TEXT	
  EQUAL  . . . . . . . . . . . .	L Near	 00000031 _TEXT	
  DONE . . . . . . . . . . . . .	L Near	 00000036 _TEXT	
Comp3  . . . . . . . . . . . . .	P Near	 00000038 _TEXT	Length= 00000021 Public
  Chk_AC . . . . . . . . . . . .	L Near	 0000004F _TEXT	
  A_Max  . . . . . . . . . . . .	L Near	 00000057 _TEXT	
_MainProc  . . . . . . . . . . .	P Near	 0000007B _TEXT	Length= 0000002D Public
factNum  . . . . . . . . . . . .	P Near	 00000059 _TEXT	Length= 00000022 Public
  RECURSE  . . . . . . . . . . .	L Near	 00000069 _TEXT	
  EXIT . . . . . . . . . . . . .	L Near	 00000079 _TEXT	
myPow  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000014 Public
  LBEGIN . . . . . . . . . . . .	L Near	 0000000E _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
number1  . . . . . . . . . . . .	DWord	 00000000 _DATA	
number2  . . . . . . . . . . . .	DWord	 00000004 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000008 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000001B _DATA	
resultLbl  . . . . . . . . . . .	Byte	 00000057 _DATA	
string . . . . . . . . . . . . .	Byte	 0000002F _DATA	
sum  . . . . . . . . . . . . . .	Byte	 00000062 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
